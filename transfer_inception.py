# -*- coding: utf-8 -*-
"""transfer_inception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YffXALO7ckYwSyatwrUEibaKv3u9NIvK
"""

import keras
import tensorflow as tf
import numpy as np 
from keras.regularizers import l2
from keras import Model

from keras.layers import Conv2D,BatchNormalization, MaxPool2D, Dropout, Dense, Input, concatenate, GlobalAveragePooling2D, AveragePooling2D, Flatten
import os

# class inception_block( keras.layers.Layer):
#    def __init__(self, batch_size):
#     super(inception_block, self).__init__()
    
# def transfer_learning



class MRNet_inception_transfer(keras.layers.Layer):
  def __init__(self, batch_size):
    super(MRNet_inception_transfer, self).__init__()
    self.inception = keras.applications.InceptionV3(include_top=False,weights="imagenet",pooling='avg',input_shape=(299,299,3) )
    # self.d1 = Dropout(0.1)
    self.fc1 = Dense(1, activation="sigmoid", input_dim=2048)
    self.b_size = batch_size

  def compute_output_shape(self, input_shape):
    return (None, 1)
  
  def call(self, inputs):
    arr1 = []
    for index in range(self.b_size):
      x = inputs[index];
      print(x.shape)
      out = self.inception(x)
      out = keras.backend.max(out, axis=0, keepdims=True)
      out = tf.squeeze(out)
      arr1.append(out)
    out = tf.stack(arr1, axis=0)
    # out = self.d1(out)
    print('no dropout')
    out = self.fc1(out)
    return out


def MRNet_inc_model(batch_size,lr, combination = ["abnormal", "axial"]):
  METRICS = [
    tf.keras.metrics.TruePositives(name='tp'),
    tf.keras.metrics.FalsePositives(name='fp'),
    tf.keras.metrics.TrueNegatives(name='tn'),
    tf.keras.metrics.FalseNegatives(name='fn'), 
    tf.keras.metrics.BinaryAccuracy(name='accuracy'),
    tf.keras.metrics.Precision(name='precision'),
    tf.keras.metrics.Recall(name='recall'),
    tf.keras.metrics.AUC(name='auc'),
  ]
  b_size = batch_size
  model = keras.Sequential()
  model.add(MRNet_inception_transfer(b_size))
  model(Input(shape=(None,299, 299, 3)) )
  model.summary();
  model.compile(
   optimizer=tf.keras.optimizers.Adam(learning_rate=lr)
    ,   loss=keras.losses.BinaryCrossentropy(label_smoothing=0.1),
      metrics=METRICS)

  data_path = "/content/gdrive/My Drive/Colab Notebooks/MRNet/"
  checkpoint_dir = data_path+"training_inception_transfer/" + combination[0] + "/" + combination[1] + "/"
  # checkpoint_dir = os.path.dirname(checkpoint_path)
  if not os.path.exists(checkpoint_dir):
    os.makedirs(checkpoint_dir)
  os.chdir(checkpoint_dir)
  cp_callback = keras.callbacks.ModelCheckpoint(checkpoint_dir+"weights.{epoch:02d}.hdf5",
                                                 save_weights_only=True,
                                                 verbose=1)

  return model, cp_callback



